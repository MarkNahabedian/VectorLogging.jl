name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        group:
          - Core
        julia-version: [ '1' ]
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - uses: julia-actions/cache@v1
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src,examples/BNF
      - uses: codecov/codecov-action@v2
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-docdeploy@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # These are required so that the job can push the generated
          # documentation to Github.  I used DocumenterTools.genkeys
          # to get a key pair.  It provides a public key to put in the
          # repository's Settings/Deploy keys.  It also generates a
          # private key to put in the repository's
          # Settings/Secrets/Repository Secrets.
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
